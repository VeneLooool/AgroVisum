version: '3.9'

services:
  # --- Zookeeper + Kafka + Kafdrop ---
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT_INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      - KAFKA_BROKER_CONNECT=kafka:29092
      - JVM_OPTS=-Xms32M -Xmx64M

  # --- Postgres for drones ---
  postgres-drones:
    image: postgres:15
    container_name: postgres-drones
    ports:
      - "6532:6532"
    environment:
      - POSTGRES_DB=drones
      - POSTGRES_USER=drones_user
      - POSTGRES_PASSWORD=drones_pass
    volumes:
      - drones-postgres:/var/lib/postgresql/data
    command: -p 6532

  # --- Postgres for missions ---
  postgres-missions:
    image: postgres:15
    container_name: postgres-missions
    ports:
      - "6543:6543"
    environment:
      - POSTGRES_DB=missions
      - POSTGRES_USER=missions_user
      - POSTGRES_PASSWORD=missions_pass
    volumes:
      - missions-postgres:/var/lib/postgresql/data
    command: -p 6543

  # --- Postgres for fields ---
  postgres-fields:
    image: postgres:15
    container_name: postgres-fields
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=fields
      - POSTGRES_USER=fields_user
      - POSTGRES_PASSWORD=fields_pass
    volumes:
      - fields-postgres:/var/lib/postgresql/data
    command: -p 5432 

  # --- fields-api ---
  fields-api:
    build:
      context: ./fields-api
      dockerfile: Dockerfile
    restart: on-failure  
    container_name: fields-api
    depends_on:
      - postgres-fields
    ports:
      - "8080:8080"
      - "50051:50051"
    env_file:
      - ./fields-api/.env

  # --- drones-api ---
  drones-api:
    build:
      context: ./drones-api
      dockerfile: Dockerfile
    restart: on-failure  
    container_name: drones-api
    depends_on:
      - postgres-drones
      - kafka
    ports:
      - "8081:8081"
      - "50052:50052"
    env_file:
      - ./drones-api/.env

  # --- missions-api ---
  missions-api:
    build:
      context: ./mission-api
      dockerfile: Dockerfile
    restart: on-failure  
    container_name: missions-api
    depends_on:
      - postgres-missions
    ports:
      - "8082:8082"
      - "50053:50053"
    env_file:
      - ./mission-api/.env

  # --- drone-client ---
  drone-client:
    build:
      context: ./drone-client
      dockerfile: Dockerfile
    restart: on-failure  
    container_name: drone-client
    depends_on:
      - kafka
    ports:
      - "8083:8083"
      - "50054:50054"
    env_file:
      - ./drone-client/.env

  # --- drones-api ---
  mission-control:
    build:
      context: ./mission-control
      dockerfile: Dockerfile
    restart: on-failure
    container_name: mission-control
    depends_on:
      - kafka
      - missions-api
      - drones-api
    ports:
      - "8084:8084"
      - "50055:50055"
    env_file:
      - ./mission-control/.env

volumes:
  drones-postgres:
  missions-postgres:
  fields-postgres:
